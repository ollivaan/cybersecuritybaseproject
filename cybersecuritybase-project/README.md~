Introduction: this project is for the course [Cyber Security Base](https://cybersecuritybase.github.io/)

DO NOT USE THIS CODE!
The assigment was to create a web application that has at least five different flaws from the OWASP top ten list [OWASP Top ten flaws](https://www.owasp.org/index.php/Top_10_2013-Top_10). Starter code for the project is provided on Github at [Cyber Security Base-project](https://github.com/cybersecuritybase/cybersecuritybase-project).

Username: test
password: 123

#Security Misconfiguration (Flaw no 5)
The Application uses an outdated version of the Spring Framework (1.4.2). Latest version is (1.4.3).
Steps to do it:

1) Open pom.xml file
2) From the pom.xml file you can see the org.springframework.boot version is outdated (1.4.2).

Steps to fix it:

1) Modify the outdated versio to newest version changing the <version> 1.4.2. RELEASE</version> to <version> 1.4.3. RELEASE</version>.

#SQL-Injection (Flaw no 1)
Steps to do it:
1) Launch application
2) Go to [localhost](http://localhost:8080)
3) Write value: admin' OR 1=1-- to the username
4) Click: submit
5) You are redirected to the secretpost page.

Steps to fix it: 

Change the code so it won't user raw SQL queries:
    INSERT INTO accounts (id, username, password) VALUES ('1', 'test', '123'); 
to this way:
    ResultSet resultSet = connection.createStatement().executeQuery("SELECT id, username, password FROM accounts WHERE username='" +username+ "' AND password='" +password+ "'");

And change the code in the Queries class getAccount to:
    public Signup getAccount(String username, String password) throws SQLException {
    String query = "SELECT id, username, password FROM accounts WHERE username= ? AND password= ?";
    PreparedStatement pstmt = connection.prepareStatement(query);
    pstmt.setString(1, username);
    pstmt.setString(2, password);
    ResultSet resultSet = pstmt.executeQuery();
    while (resultSet.next()) {
        return new Signup(resultSet.getInt("id"), resultSet.getString("username"), resultSet.getString("password"));
}

#Missing Function level access control (Flaw no 7)
Anyone can access to h2-console
Steps to do it:
1) go to [localhost/h2-console](http://localhost:8080/h2-console)

Steps to fix it:
Edit lines 26 and 27 from SecurityConfiguration class:
    http.authorizeRequests()
                .anyRequest().permitAll();
to: 
        http.authorizeRequests()
            .antMatchers("/h2-console/*").hasIpAddress("192.168.1.1")
            .anyRequest().permitAll();
}
	
#Cross-Site Scripting (XSS) (Flaw no 3)
Allow unescaped javascript in submit-field
Steps to do it:
1) Log in to the web app (username: test, password: 123)
2) write "<script>alert(1);</script>" to the submit field and press submit
3) go to http://localhost:8080/form and log in again
4) try submit something ("localhost:8080 says 1" should be visible)

Steps to fix it:
1) go and fix file secretforum.html and change <span th:utext="${item}">hello world!</span> to <span th:text="${item}">hello world!</span>... i.e th:utext -> th:text

#Cross-Site Request Forgery (CSRF) (Flaw no 8)
Web app does not have any anti-CSRF protection mechanisms. Currently, if the user is logged in, the user can potentially be forced to change his or her password through a CSRF attack

Steps to fix it:
1) uncomment http.csrf().disable();  from SecurityConfiguration.java class (line 23)
2) Relaunch the app. Spring framework will automatically fix the issue



